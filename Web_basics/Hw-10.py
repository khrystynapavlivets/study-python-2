# Завдання 1: Основи HTTP
# Поясніть, що таке протокол HTTP і для чого він використовується в веб-розробці.
# Розкажіть про основні методи HTTP, такі як GET, POST, PUT і DELETE.

# HTTP (HyperText Transfer Protocol) — це протокол передачі гіпертексту,
# який використовується для обміну даними між клієнтом (наприклад, веб-браузером або застосунком) і сервером.
# GET	Отримує ресурс (наприклад, сторінку або список даних). Не змінює дані на сервері.
# POST	Створює новий ресурс на сервері. Використовується для відправки форм або додавання даних.
# PUT	Оновлює весь ресурс. Якщо запису не існує, може його створити.
# PATCH	Оновлює частину ресурсу (не весь об'єкт, як PUT).
# DELETE	Видаляє ресурс.

# Завдання 2: Клієнт та Сервер
# 2.1. Опишіть різницю між клієнтом і сервером у контексті веб-розробки.
# 2.2. Поясніть, як клієнт та сервер взаємодіють за допомогою HTTP-запитів та відповідей.

# Клієнт — це пристрій або програма, яка запитує інформацію з Інтернету. Це може бути ваш веб-браузер (Chrome, Firefox, Safari), мобільний додаток або будь-яка інша програма, яка взаємодіє з веб-сервісами.
# Сервер — це комп'ютер або програма, яка зберігає і надає інформацію. Він отримує запити від клієнтів і відправляє їм потрібну інформацію.
# Простий приклад:
#
# Клієнт — це ваш браузер, коли ви заходите на вебсайт.
# Сервер — це комп'ютер, який зберігає цей сайт і відправляє його вашому браузеру, коли ви запитуєте сторінку.
#
#


# Завдання 1: Виконання GET-запиту
# Створіть Python-сценарій, який використовує бібліотеку requests для виконання GET-запиту до веб-ресурсу та виведення вмісту веб-сторінки на екран.
# Використовуйте функцію requests.get() для виконання запиту.


import requests

# response = requests.get("https://jsonplaceholder.typicode.com/posts/1")
# print(response.status_code)  # 200 OK
# print(response.json())  # Отримані дані


# Завдання 2: Параметри запиту
# Розширте попереднє завдання, додаючи можливість вказати параметри запиту.
# Виконайте GET-запит до веб-ресурсу, передаючи параметри запиту, такі як параметри запиту у URL або параметри через словник.

###########################################################################


# url = "https://jsonplaceholder.typicode.com/posts"
# params = {"userId": 1}

# response = requests.get(url, params=params)
#
# # Перевіряємо успішність відповіді
# if response.status_code == 200:
# posts = response.json()  # Перетворюємо JSON-відповідь на Python-об'єкт
# for post in posts:
#     print(f"ID: {post['id']}, Заголовок: {post['title']}")
# else:
#     print(f"Помилка! Код статусу: {response.status_code}")



###########################################################################


# Завдання 3: POST-запит
# Створіть Python-сценарій для виконання POST-запиту до веб-ресурсу.
# Відправте дані на сервер, наприклад, форму з ім'ям користувача і паролем.

# site = "https://jsonplaceholder.typicode.com/posts"
#
# body = {
#     "userId": 10,
#     "name": "test",
#     "password": "test"
# }
# name_post = requests.post(url=site, json=body)
# if name_post.status_code in [200, 201]:
#     print(name_post.status_code)
# else:
#     print("Помилка:", name_post.status_code, name_post.text)
# print(name_post.reason)
# print(name_post.text)


###########################################################################

# Завдання 4: Обробка відповіді
# Після виконання запиту, розпарсьте вміст HTTP-відповіді та виведіть потрібну інформацію.
# Наприклад, виведіть заголовки відповіді або вміст сторінки.

# site = "https://jsonplaceholder.typicode.com/posts"
# response = requests.get(url= site)
#
#
# for header, value in response.headers.items():
#     print(f"Header: {header} ---- value: {value}")
#
# print(response.text)


###########################################################################

# Завдання 5: Обробка помилок
# Додайте обробку помилок до вашого коду. Обробляйте можливі винятки, такі як requests.exceptions.RequestException,
# та виводьте відповідні повідомлення про помилку.

# site = "https://jsonplaceholder.typicode.com/posts/1"
# response = requests.get(url=site)
# try:
#     response = requests.get(url=site)
#     response.raise_for_status()  # Перевірка статусу відповіді
#     print(response.status_code)
# except requests.exceptions.RequestException as e:
#     print(f"Сталася помилка: {e}")


###########################################################################

# Завдання 6: Збереження вмісту в файл
# Розширте ваш код, щоб зберегти отриманий вміст веб-сторінки у файл.
# Використайте функціонал Python для роботи з файлами для збереження вмісту.

# site = "https://jsonplaceholder.typicode.com/posts/1"
# response = requests.get(url=site)
#
# # Збереження у файл
# with open("webpage_content.txt", "w", encoding="utf-8") as file:
#     file.write(response.text)
